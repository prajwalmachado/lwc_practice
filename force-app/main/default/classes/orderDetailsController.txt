import { LightningElement, track, api } from 'lwc';
import getOrderDetailsByContactId from '@salesforce/apex/OrderDetailsController.getOrderDetailsByContactId';

export default class OrderDetailsTable extends LightningElement {
    @api recordId; // Automatically gets the Contact ID when on the Contact record page
    @track data = [];
    @track error = '';

    columns = [
        { label: 'Subscription Key', fieldName: 'subscriptionKey', type: 'text' },
        { label: 'Order IDs', fieldName: 'orderIds', type: 'text' },
        { label: 'Product', fieldName: 'product', type: 'text' },
        { label: 'Product Name', fieldName: 'productName', type: 'text' },
        {
            label: 'Subscription Amount',
            fieldName: 'subscriptionAmount',
            type: 'currency',
            typeAttributes: { currencyCode: 'USD' }
        },
        {
            label: 'Total Amount',
            fieldName: 'totalAmount',
            type: 'currency',
            typeAttributes: { currencyCode: 'USD' }
        }
    ];

    // Fetch order details when the component is initialized
    connectedCallback() {
        this.fetchOrderDetails();
    }

    // Fetch order details from Apex using the Contact ID
    fetchOrderDetails() {
        if (!this.recordId) {
            this.error = 'Contact ID is not available.';
            return;
        }

        getOrderDetailsByContactId({ contactId: this.recordId })
            .then((result) => {
                if (result && result.length > 0) {
                    this.data = result.map((record) => ({
                        ...record,
                        orderIds: record.orderIds.join(', ') // Join order IDs into a single string
                    }));
                    this.error = '';
                } else {
                    this.error = 'No order details found for this Contact ID.';
                }
            })
            .catch((error) => {
                this.error = error.body ? error.body.message : 'An unexpected error occurred.';
                this.data = [];
            });
    }
}

Apex Controller class
public class orderDetailsController {
	 @AuraEnabled(cacheable=true)
    public static List<OrderData> getOrderDetailsByContactId(String contactId) {
        if (String.isEmpty(contactId)) {
            throw new AuraHandledException('Contact ID cannot be null or empty.');
        }

        String unifiedRecordId = getUnifiedIndividualIdByContactId(contactId);
        if (String.isEmpty(unifiedRecordId)) {
            throw new AuraHandledException('No UnifiedIndividualID found for the provided Contact ID.');
        }

        return getOrderDataByUnifiedId(unifiedRecordId);
    }

 
    @AuraEnabled(cacheable=true)
    public static String getUnifiedIndividualIdByContactId(String contactId) {
        List<UnifiedLinkssotIndividualDefa__dlm> records = [
            SELECT UnifiedRecordId__c
            FROM UnifiedLinkssotIndividualDefa__dlm
            WHERE SourceRecordId__c = :contactId
            LIMIT 1
        ];
        return records.isEmpty() ? null : records[0].UnifiedRecordId__c;
    }

   // helper method to fetch order data using UnifiedIndividualID
    @AuraEnabled(cacheable=true)
    public static List<OrderData> getOrderDataByUnifiedId(String unifiedRecordId) {
        List<String> subscriptionKeys = new List<String>();
        
        for (UnifiedLinkssotIndividualDefa__dlm record : [
            SELECT SourceRecordId__c
            FROM UnifiedLinkssotIndividualDefa__dlm
            WHERE UnifiedRecordId__c = :unifiedRecordId
        ]) {
            subscriptionKeys.add(record.SourceRecordId__c);
        }

        
        Map<String, OrderData> orderDataMap = new Map<String, OrderData>();
        for (ecommerce_dataERP_OrderDetails_S3csv__dlm order : [
            SELECT Subscription__c, OrderID__c, Product_Name__c, Product__c, Total_Amount_Paid__c, Subscription_Amount__c
            FROM ecommerce_dataERP_OrderDetails_S3csv__dlm
            WHERE Subscription__c IN :subscriptionKeys
        ]) {
            // Debug the current order record
            System.debug('Order Record: ' + order);
            if (!orderDataMap.containsKey(order.Subscription__c)) {
                orderDataMap.put(order.Subscription__c, new OrderData(
                    order.Subscription__c, new List<String>(), 0, null, null, 0
                ));
            }

            OrderData data = orderDataMap.get(order.Subscription__c);
            data.orderIds.add(order.OrderID__c);
            data.totalAmount += order.Total_Amount_Paid__c;
            data.productName = order.Product_Name__c;
            data.product = order.Product__c;
            data.subscriptionAmount += order.Subscription_Amount__c;
        }

        return orderDataMap.values();
    }

    // Inner class to represent order data
    public class OrderData {
        @AuraEnabled public String subscriptionKey { get; set; }
        @AuraEnabled public List<String> orderIds { get; set; }
        @AuraEnabled public Decimal totalAmount { get; set; }
        @AuraEnabled public String productName { get; set; }
        @AuraEnabled public String product { get; set; }
        @AuraEnabled public Decimal subscriptionAmount { get; set; }

        public OrderData(String subscriptionKey, List<String> orderIds, Decimal totalAmount, String productName, String product, Decimal subscriptionAmount) {
            this.subscriptionKey = subscriptionKey;
            this.orderIds = orderIds;
            this.totalAmount = totalAmount;
            this.productName = productName;
            this.product = product;
            this.subscriptionAmount = subscriptionAmount;
        }
    }
}